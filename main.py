from modules.real_estate.callbacks import *
from modules.show_places.callbacks import *
from modules.job.callbacks import *
from modules.food.callbacks import *
from modules.car.callbacks import *
from modules.document.callbacks import *
from modules.taxi.callbacks import *
from modules.services.callbacks import *
import pandas as pd
from aiogram.utils.exceptions import BadRequest
from settings.config import dp, bot
from aiogram import types
from aiogram import executor
from aiogram.dispatcher import filters
from constants import ABOUT, ADD_TO_BOT


MAIN_MENU_BOARD = types.InlineKeyboardMarkup().\
    add(types.InlineKeyboardButton(text='‚Ü©Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

kb = types.InlineKeyboardMarkup(row_width=2)
b1 = types.InlineKeyboardButton(text='üóø –î–æ...—å–Ω–æ—Å—Ç–∏', callback_data='showPlaces')
b2 = types.InlineKeyboardButton(text='üè®–ù–µ–¥...–º–æ—Å—Ç—å', callback_data='real_estate')
b3 = types.InlineKeyboardButton(text='üéô –û–±—â–∏–π —á–∞—Ç', url='https://t.me/surkoncyprus')
b4 = types.InlineKeyboardButton(text='ü§µ‚Äç‚ôÇ –†–∞–±–æ—Ç–∞', callback_data='job')
b5 = types.InlineKeyboardButton(text='üç£üçø...–∫–∞ –µ–¥—ã', callback_data='food')
b6 = types.InlineKeyboardButton(text='üöó –ê–≤—Ç–æ', callback_data='auto')
b7 = types.InlineKeyboardButton(text='üìë–î–æ–∫...–ø–æ–º–æ—â—å', callback_data='document')
b8 = types.InlineKeyboardButton(text='üìç –£—Å–ª.../–ú–µ—Å—Ç–∞', callback_data='services')
b9 = types.InlineKeyboardButton(text='üöï –¢–∞–∫—Å–∏', callback_data='taxi')
b10 = types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞', callback_data='addToBot')

kb.add(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10)


@dp.message_handler(commands=['menu', 'start'])
async def send_welcome(message: types.Message):
    await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=kb)


@dp.callback_query_handler(filters.Text(contains='menu'))
async def send_welcome(callback: types.CallbackQuery):
    await callback.message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=kb)


@dp.message_handler(commands=['about', 'help'])
async def show_menu_callback(message: types.Message):
    await message.answer(text=ABOUT,
                         reply_markup=MAIN_MENU_BOARD)


@dp.message_handler(filters.Text(contains='afisha'))
async def show_menu_callback(message: types.Message):
    s_data = pd.read_excel('SurkonBot.xlsx', sheet_name='–ê—Ñ–∏—à–∞',
                           usecols=['–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
                           index_col='–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                           )
    for content, pic in s_data.iterrows():
        try:
            await message.answer_photo(photo=pic.values[0])
            await message.answer(text=str(content))
        except BadRequest:
            pass
    await message.answer(text='–°–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –æ—Ç Surkon botüòâ', reply_markup=MAIN_MENU_BOARD)


@dp.callback_query_handler(filters.Text(contains='addToBot'))
async def add_to_bot(callback: types.CallbackQuery):
    await callback.message.answer(text=ADD_TO_BOT, reply_markup=MAIN_MENU_BOARD)


@dp.message_handler(commands=['add_to_bot'])
async def add_to_bot(message: types.Message):
    await message.answer(text=ADD_TO_BOT, reply_markup=MAIN_MENU_BOARD)


async def setup_bot_commands(req):
    bot_commands = [
        types.BotCommand(command="/menu", description="üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/afisha", description="‚≠ê–ê—Ñ–∏—à–∞"),
        types.BotCommand(command="/about", description="üì¢–û –±–æ—Ç–µ"),
        types.BotCommand(command="/add_to_bot", description="‚ûï–î–æ–±–∞–≤–∏—Ç—å –≤ –ë–æ—Ç–∞")
    ]
    await bot.set_my_commands(bot_commands)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=setup_bot_commands)
